version: '2.1'

services:

  product: # the name of the microservice. This will also be the hostname of the container in the internal Docker network.
    container_name: product
    build: microservices/product-service
    mem_limit: 512m
    ports:
    - "5006:5006" # remote debug port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  recommendation:
    container_name: recommendation
    build: microservices/recommendation-service
    mem_limit: 512m
#    ports:
#      - "5007:5007" # remote debug port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  review:
    container_name: review
    build: microservices/review-service
    mem_limit: 912m
#    ports:
#    - "5008:5008" # remote debug port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  product-composite:
    container_name: product-composite
    build: microservices/product-composite-service
    mem_limit: 512m
    ports:
#      - "8080:8080" # because we want to reach the container outside Docker. # we are reaching this via edge server only. so this port is not exposed.
      - "5005:5005" # remote debug port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      rabbitmq:
        condition: service_healthy

  mongodb:
    container_name: mongodb
    image: mongo:4.4.2
    mem_limit: 512m
    ports:
      - "27017:27017"
    command: mongod
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 5s
      timeout: 2s
      retries: 60

  mysql:
    container_name: mysql
    image: mysql:5.7.32
    mem_limit: 512m
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 2s
      retries: 60

  # Use rabbitmq default
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.8.11-management
    mem_limit: 512m
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 2s
      retries: 60

  eureka:
    container_name: eureka
    build: spring-cloud/eureka-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#    ports:
#      - "8761:8761" # we are reaching this via edge server only. so this port is not exposed.

  gateway:
    container_name: gateway
    build: spring-cloud/gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    mem_limit: 512m
    ports:
      - "8443:8443"

  config-server:
    build: spring-cloud/config-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native # native is added to signal to the config server that the config repository is based on local files.
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY} # used to specify the symmetric encryption key that will be used by the config server to encrypt and decrypt sensitive configuration information.
    volumes:
      - $PWD/config-repo:/config-repo # volume declaration will make the config-repo folder accessible in the Docker container at /config-repo

  zipkin:
    image: openzipkin/zipkin:2.23.2
    mem_limit: 1024m
    environment:
      - RABBIT_ADDRESSES=rabbitmq # The RABBIT_ADDRESSES=rabbitmq environment variable is used to specify that Zipkin will receive trace information using RabbitMQ and that Zipkin will connect to RabbitMQ using the hostname rabbitmq
      - STORAGE_TYPE=mem
    ports:
      - 9411:9411 # Zipkin exposes the HTTP port 9411 for web browsers to access its web user interface.
    depends_on:
      rabbitmq:
        condition: service_healthy