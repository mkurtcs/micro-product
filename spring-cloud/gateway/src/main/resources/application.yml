server.port: 8443 # To indicate that the edge server talks HTTPS and not HTTP, we also change the port from 8080 to 8443 in the server.port parameter.

spring.application.name: gateway

#server.ssl:
#  key-store-type: PKCS12
#  key-store: classpath:keystore/edge.p12
#  key-store-password: password
#  key-alias: localhost

app:
  eureka-username: u
  eureka-password: p
  eureka-server: localhost
  auth-server: localhost

eureka:
  client:
    serviceUrl:
      defaultZone: "http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/"
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

spring.cloud.gateway.routes:

  - id: product-composite # The name of the route is product-composite
    uri: lb://product-composite # If the route is selected by its predicates, the request will be routed to the service that is named product-composite in the discovery service, Netflix Eureka. The protocol lb:// is used to direct Spring Cloud Gateway to use the client-side load balancer to look up the destination in the discovery service.
    predicates:
      - Path=/product-composite/** # - Path=/product-composite/** is used to specify what requests this route should match. ** matches zero or more elements in the path.

  - id: oauth2-server
    uri: lb://auth-server
    predicates:
      - Path=/oauth2/**

  - id: oauth2-login
    uri: lb://auth-server
    predicates:
      - Path=/login/**

  - id: oauth2-error
    uri: lb://auth-server
    predicates:
      - Path=/error/**

  - id: product-composite-swagger-ui # To be able to route requests to the Swagger UI
    uri: lb://product-composite # Requests sent to the edge server with a URI starting with /openapi/ will be directed to the product-composite service.
    predicates:
      - Path=/openapi/**

  - id: product-composite-swagger-ui-webjars
    uri: lb://product-composite
    predicates:
      - Path=/webjars/**

  - id: eureka-api # should be handled as a call to the Eureka API.
    uri: http://${app.eureka-server}:8761
    predicates:
      - Path=/eureka/api/{segment} # The {segment} part in the Path value matches zero or more elements in the path and will be used to replace the {segment} part in the SetPath value.
    filters:
      - SetPath=/eureka/{segment}

  - id: eureka-web-start # should be handled as a call to the Eureka web page.
    uri: http://${app.eureka-server}:8761
    predicates:
      - Path=/eureka/web
    filters:
      - SetPath=/

  - id: eureka-web-other
    uri: http://${app.eureka-server}:8761
    predicates:
      - Path=/eureka/**

  - id: host_route_200
    uri: http://httpstat.us
    predicates:
      - Host=i.feel.lucky:8080
      - Path=/headerrouting/**
    filters:
      - SetPath=/200

  - id: host_route_418
    uri: http://httpstat.us
    predicates:
      - Host=im.a.teapot:8080
      - Path=/headerrouting/**
    filters:
      - SetPath=/418

  - id: host_route_501
    uri: http://httpstat.us
    predicates:
      - Path=/headerrouting/**
    filters:
      - SetPath=/501

# The authorization server's OIDC discovery endpoint has been registered here.
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://${app.auth-server}:9999

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

# Configure log levels so that we can see log messages from interesting parts of the internal processing
# in the Spring Cloud Gateway, for example, how it decides where to route incoming requests to:
logging:
  level:
    root: INFO
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: INFO
    org.springframework.cloud.gateway: TRACE

---
spring.config.activate.on-profile: docker

app:
  eureka-server: eureka
  auth-server: auth-server